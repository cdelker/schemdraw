# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, Collin J. Delker
# This file is distributed under the same license as the Schemdraw package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Schemdraw \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-02 17:27-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh\n"
"Language-Team: zh <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../usage/start.rst:2
msgid "Getting Started"
msgstr "开始"

#: ../../usage/start.rst:5
msgid "Installation"
msgstr "安装"

#: ../../usage/start.rst:7
msgid "schemdraw can be installed from pip using"
msgstr "可以使用 pip 安装 schemdraw。"

#: ../../usage/start.rst:13
msgid "or to include optional ``matplotlib`` backend dependencies:"
msgstr ""

#: ../../usage/start.rst:19
msgid ""
"To allow the SVG drawing :ref:`backends` to render math expressions, "
"install the optional `ziamath <https://ziamath.readthedocs.io>`_ "
"dependency with:"
msgstr ""

#: ../../usage/start.rst:27
msgid ""
"Alternatively, schemdraw can be installed directly by downloading the "
"source and running"
msgstr ""

#: ../../usage/start.rst:33
msgid "Schemdraw requires Python 3.8 or higher."
msgstr ""

#: ../../usage/start.rst:37
msgid "Overview"
msgstr ""

#: ../../usage/start.rst:39
msgid ""
"The :py:mod:`schemdraw` module allows for drawing circuit elements. "
":py:mod:`schemdraw.elements` contains :ref:`electrical` pre-defined for "
"use in a drawing. A common import structure is:"
msgstr ""

#: ../../usage/start.rst:49
msgid ""
"To make a circuit diagram, use a context manager (`with` statement) on a "
":py:class:`schemdraw.Drawing`. Then any "
":py:class:`schemdraw.elements.Element` instances created within the "
"`with` block added to the drawing:"
msgstr ""

#: ../../usage/start.rst:58
msgid ""
"**New in version 0.18**: The context manager keeps track of the active "
"drawing, so that using `drawing.add(element)` or `drawing += element` is "
"no longer necessary. These operators are still functional and are needed "
"if drawing outside a `with` context manager:"
msgstr ""

#: ../../usage/start.rst:68
msgid ""
"Element placement and other properties are set using a chained method "
"interface, for example:"
msgstr ""

#: ../../usage/start.rst:79
msgid ""
"Methods `up`, `down`, `left`, `right` specify the drawing direction, and "
"`label` adds text to the element. If not specified, elements reuse the "
"same direction from the previous element, and begin where the previous "
"element ended."
msgstr ""

#: ../../usage/start.rst:83
msgid ""
"Using the `with` context manager is a convenience, letting the drawing be"
" displayed and saved upon exiting the `with` block. Schematics may also "
"be created simply by assinging a new Drawing instance, but this requires "
"explicitly adding elements to the drawing with `d.add` or d +=`, and "
"calling `draw()` and/or `save()` to show the drawing:"
msgstr ""

#: ../../usage/start.rst:94
msgid ""
"For full details of placing and stylizing elements, see :ref:`placement`."
" and :py:class:`schemdraw.elements.Element`."
msgstr ""

#: ../../usage/start.rst:97
msgid ""
"In general, parameters that control **what** is drawn are passed to the "
"element itself, and parameters that control **how** things are drawn are "
"set using chained Element methods. For example, to make a polarized "
"Capacitor, pass `polar=True` as an argument to `Capacitor`, but to change"
" the Capacitor's color, use the `.color()` method: "
"`elm.Capacitor(polar=True).color('red')`."
msgstr ""

#: ../../usage/start.rst:101
msgid "Viewing the Drawing"
msgstr ""

#: ../../usage/start.rst:104
msgid "Jupyter"
msgstr ""

#: ../../usage/start.rst:106
msgid ""
"When run in a Jupyter notebook, the schematic will be drawn to the cell "
"output after the `with` block is exited. If your schematics pop up in an "
"external window, and you are using the Matplotlib backend, set Matplotlib"
" to inline mode before importing schemdraw:"
msgstr ""

#: ../../usage/start.rst:113
msgid ""
"For best results when viewing circuits in the notebook, use a vector "
"figure format, such as svg before importing schemdraw:"
msgstr ""

#: ../../usage/start.rst:121
msgid "Python Scripts and GUI/Web apps"
msgstr ""

#: ../../usage/start.rst:123
msgid ""
"If run as a Python script, the schematic will be opened in a pop-up "
"window after the `with` block exits. Add the `show=False` option when "
"creating the Drawing to suppress the window from appearing."
msgstr ""

#: ../../usage/start.rst:131
msgid ""
"The raw image data as a bytes array can be obtained by calling "
"`.get_imagedata()` with the after the `with` block exits. This can be "
"useful for integrating schemdraw into an existing GUI or web application."
msgstr ""

#: ../../usage/start.rst:142
msgid "Headless Servers"
msgstr ""

#: ../../usage/start.rst:144
msgid ""
"When running on a server, sometimes there is no display available. The "
"code may attempt to open the GUI preview window and fail. In these cases,"
" try setting the Matplotlib backend to a non-GUI option. Before importing"
" schemdraw, add these lines to use the Agg backend which does not have a "
"GUI. Then get the drawing using `d.get_imagedata()`, or `d.save()` to get"
" the image."
msgstr ""

#: ../../usage/start.rst:155
msgid "Alternatively, use Schemdraw's SVG backend (see :ref:`backends`)."
msgstr ""

#: ../../usage/start.rst:159
msgid "Saving Drawings"
msgstr ""

#: ../../usage/start.rst:161
msgid ""
"To save the schematic to a file, add the `file` parameter when setting up"
" the Drawing. The image type is determined from the file extension. "
"Options include `svg`, `eps`, `png`, `pdf`, and `jpg` when using the "
"Matplotlib backend, and `svg` when using the SVG backend. A vector format"
" such as `svg` is recommended for best image quality."
msgstr ""

#: ../../usage/start.rst:171
msgid ""
"The Drawing may also be saved using with the "
":py:meth:`schemdraw.Drawing.save` method."
msgstr ""

